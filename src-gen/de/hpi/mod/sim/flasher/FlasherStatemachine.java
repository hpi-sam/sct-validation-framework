/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.flasher;

import de.hpi.mod.sim.ITimer;

public class FlasherStatemachine implements IFlasherStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean start;
		
		private long startValue;
		
		
		public void raiseStart(final long value) {
			startValue = value;
			start = true;
			runCycle();
		}
		protected long getStartValue() {
			if (! start ) 
				throw new IllegalStateException("Illegal event value access. Event Start is not raised!");
			return startValue;
		}
		
		private boolean on;
		
		
		public boolean isRaisedOn() {
			return on;
		}
		
		protected void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public boolean isRaisedOff() {
			return off;
		}
		
		protected void raiseOff() {
			off = true;
		}
		
		protected void clearEvents() {
			start = false;
		}
		protected void clearOutEvents() {
		
		on = false;
		off = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		flasher_Off,
		flasher_On,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private long count;
	
	protected long getCount() {
		return count;
	}
	
	protected void setCount(long value) {
		this.count = value;
	}
	
	
	public FlasherStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setCount(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_flasher_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case flasher_Off:
				flasher_Off_react(true);
				break;
			case flasher_On:
				flasher_On_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_flasher();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case flasher_Off:
			return stateVector[0] == State.flasher_Off;
		case flasher_On:
			return stateVector[0] == State.flasher_On;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseStart(long value) {
		sCInterface.raiseStart(value);
	}
	
	public boolean isRaisedOn() {
		return sCInterface.isRaisedOn();
	}
	
	public boolean isRaisedOff() {
		return sCInterface.isRaisedOff();
	}
	
	private boolean check_flasher__choice_0_tr0_tr0() {
		return getCount()>0;
	}
	
	private boolean check_flasher__choice_0_tr1_tr1() {
		return getCount()<=0;
	}
	
	private void effect_flasher__choice_0_tr0() {
		enterSequence_flasher_On_default();
	}
	
	private void effect_flasher__choice_0_tr1() {
		enterSequence_flasher_Off_default();
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_flasher_Off() {
		timer.setTimer(this, 0, 500, false);
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_flasher_On() {
		timer.setTimer(this, 1, 500, false);
		
		sCInterface.raiseOn();
		
		setCount((count - 1));
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_flasher_Off() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'On'. */
	private void exitAction_flasher_On() {
		timer.unsetTimer(this, 1);
		
		sCInterface.raiseOff();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_flasher_Off_default() {
		entryAction_flasher_Off();
		nextStateIndex = 0;
		stateVector[0] = State.flasher_Off;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_flasher_On_default() {
		entryAction_flasher_On();
		nextStateIndex = 0;
		stateVector[0] = State.flasher_On;
	}
	
	/* 'default' enter sequence for region flasher */
	private void enterSequence_flasher_default() {
		react_flasher__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_flasher_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_flasher_Off();
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_flasher_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_flasher_On();
	}
	
	/* Default exit sequence for region flasher */
	private void exitSequence_flasher() {
		switch (stateVector[0]) {
		case flasher_Off:
			exitSequence_flasher_Off();
			break;
		case flasher_On:
			exitSequence_flasher_On();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_flasher__choice_0() {
		if (check_flasher__choice_0_tr0_tr0()) {
			effect_flasher__choice_0_tr0();
		} else {
			if (check_flasher__choice_0_tr1_tr1()) {
				effect_flasher__choice_0_tr1();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_flasher__entry_Default() {
		enterSequence_flasher_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean flasher_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.start) {
				exitSequence_flasher_Off();
				setCount(sCInterface.getStartValue());
				
				react_flasher__choice_0();
			} else {
				if (((timeEvents[0]) && (getCount()>0))) {
					exitSequence_flasher_Off();
					enterSequence_flasher_On_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean flasher_On_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_flasher_On();
				enterSequence_flasher_Off_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
