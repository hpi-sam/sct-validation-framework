/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.tlrobot;

import de.hpi.mod.sim.ITimer;

public class TlRobotStatemachine implements ITlRobotStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean newTarget;
		
		
		public void raiseNewTarget() {
			newTarget = true;
			runCycle();
		}
		
		private boolean actionCompleted;
		
		
		public void raiseActionCompleted() {
			actionCompleted = true;
			runCycle();
		}
		
		protected void clearEvents() {
			newTarget = false;
			actionCompleted = false;
		}
	}
	
	
	protected class SCIProcessorImpl implements SCIProcessor {
	
		private boolean arrived;
		
		
		public boolean isRaisedArrived() {
			return arrived;
		}
		
		protected void raiseArrived() {
			arrived = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		arrived = false;
		}
		
	}
	
	
	protected class SCIActorsImpl implements SCIActors {
	
		private boolean driveForward;
		
		
		public boolean isRaisedDriveForward() {
			return driveForward;
		}
		
		protected void raiseDriveForward() {
			driveForward = true;
		}
		
		private boolean turnLeft;
		
		
		public boolean isRaisedTurnLeft() {
			return turnLeft;
		}
		
		protected void raiseTurnLeft() {
			turnLeft = true;
		}
		
		private boolean turnRight;
		
		
		public boolean isRaisedTurnRight() {
			return turnRight;
		}
		
		protected void raiseTurnRight() {
			turnRight = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		driveForward = false;
		turnLeft = false;
		turnRight = false;
		}
		
	}
	
	
	protected class SCIDataImpl implements SCIData {
	
		private SCIDataOperationCallback operationCallback;
		
		public void setSCIDataOperationCallback(
				SCIDataOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCICellTypeImpl implements SCICellType {
	
		private long tRAFFICLIGHT_RED;
		
		public long getTRAFFICLIGHT_RED() {
			return tRAFFICLIGHT_RED;
		}
		
		public void setTRAFFICLIGHT_RED(long value) {
			this.tRAFFICLIGHT_RED = value;
		}
		
		private long tRAFFICLIGHT_GREEN;
		
		public long getTRAFFICLIGHT_GREEN() {
			return tRAFFICLIGHT_GREEN;
		}
		
		public void setTRAFFICLIGHT_GREEN(long value) {
			this.tRAFFICLIGHT_GREEN = value;
		}
		
		private long cROSSROAD;
		
		public long getCROSSROAD() {
			return cROSSROAD;
		}
		
		public void setCROSSROAD(long value) {
			this.cROSSROAD = value;
		}
		
		private long bLOCKED;
		
		public long getBLOCKED() {
			return bLOCKED;
		}
		
		public void setBLOCKED(long value) {
			this.bLOCKED = value;
		}
		
		private long aRRIVAL_POINT;
		
		public long getARRIVAL_POINT() {
			return aRRIVAL_POINT;
		}
		
		public void setARRIVAL_POINT(long value) {
			this.aRRIVAL_POINT = value;
		}
		
	}
	
	
	protected class SCIDirectionImpl implements SCIDirection {
	
		private long lEFT;
		
		public long getLEFT() {
			return lEFT;
		}
		
		public void setLEFT(long value) {
			this.lEFT = value;
		}
		
		private long aHEAD;
		
		public long getAHEAD() {
			return aHEAD;
		}
		
		public void setAHEAD(long value) {
			this.aHEAD = value;
		}
		
		private long rIGHT;
		
		public long getRIGHT() {
			return rIGHT;
		}
		
		public void setRIGHT(long value) {
			this.rIGHT = value;
		}
		
		private long bEHIND;
		
		public long getBEHIND() {
			return bEHIND;
		}
		
		public void setBEHIND(long value) {
			this.bEHIND = value;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	protected SCIProcessorImpl sCIProcessor;
	
	protected SCIActorsImpl sCIActors;
	
	protected SCIDataImpl sCIData;
	
	protected SCICellTypeImpl sCICellType;
	
	protected SCIDirectionImpl sCIDirection;
	
	private boolean initialized = false;
	
	public enum State {
		tlRobot_idle,
		tlRobot_driving,
		tlRobot_driving__driving_waiting_on_trafficlight,
		tlRobot_driving__driving_leaving_crossroad_ahead,
		tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2,
		tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1,
		tlRobot_driving__driving_leaving_crossroad_to_right_side,
		tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right,
		tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward,
		tlRobot_driving__driving_leaving_crossroad_to_left_side,
		tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1,
		tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left,
		tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2,
		tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3,
		tlRobot_driving__driving_entering_crossroad,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	public TlRobotStatemachine() {
		sCInterface = new SCInterfaceImpl();
		sCIProcessor = new SCIProcessorImpl();
		sCIActors = new SCIActorsImpl();
		sCIData = new SCIDataImpl();
		sCICellType = new SCICellTypeImpl();
		sCIDirection = new SCIDirectionImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIData.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIData must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCICellType.setTRAFFICLIGHT_RED(0);
		
		sCICellType.setTRAFFICLIGHT_GREEN(1);
		
		sCICellType.setCROSSROAD(2);
		
		sCICellType.setBLOCKED(3);
		
		sCICellType.setARRIVAL_POINT(4);
		
		sCIDirection.setLEFT(0);
		
		sCIDirection.setAHEAD(1);
		
		sCIDirection.setRIGHT(2);
		
		sCIDirection.setBEHIND(3);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_tlRobot_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case tlRobot_idle:
				tlRobot_idle_react(true);
				break;
			case tlRobot_driving__driving_waiting_on_trafficlight:
				tlRobot_driving__driving_waiting_on_trafficlight_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2:
				tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1:
				tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right:
				tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward:
				tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1:
				tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left:
				tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2:
				tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_react(true);
				break;
			case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3:
				tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_react(true);
				break;
			case tlRobot_driving__driving_entering_crossroad:
				tlRobot_driving__driving_entering_crossroad_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_tlRobot();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		sCIProcessor.clearEvents();
		sCIActors.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCIProcessor.clearOutEvents();
		sCIActors.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case tlRobot_idle:
			return stateVector[0] == State.tlRobot_idle;
		case tlRobot_driving:
			return stateVector[0].ordinal() >= State.
					tlRobot_driving.ordinal()&& stateVector[0].ordinal() <= State.tlRobot_driving__driving_entering_crossroad.ordinal();
		case tlRobot_driving__driving_waiting_on_trafficlight:
			return stateVector[0] == State.tlRobot_driving__driving_waiting_on_trafficlight;
		case tlRobot_driving__driving_leaving_crossroad_ahead:
			return stateVector[0].ordinal() >= State.
					tlRobot_driving__driving_leaving_crossroad_ahead.ordinal()&& stateVector[0].ordinal() <= State.tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1.ordinal();
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side:
			return stateVector[0].ordinal() >= State.
					tlRobot_driving__driving_leaving_crossroad_to_right_side.ordinal()&& stateVector[0].ordinal() <= State.tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward.ordinal();
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side:
			return stateVector[0].ordinal() >= State.
					tlRobot_driving__driving_leaving_crossroad_to_left_side.ordinal()&& stateVector[0].ordinal() <= State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3.ordinal();
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3:
			return stateVector[0] == State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3;
		case tlRobot_driving__driving_entering_crossroad:
			return stateVector[0] == State.tlRobot_driving__driving_entering_crossroad;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public SCIProcessor getSCIProcessor() {
		return sCIProcessor;
	}
	
	public SCIActors getSCIActors() {
		return sCIActors;
	}
	
	public SCIData getSCIData() {
		return sCIData;
	}
	
	public SCICellType getSCICellType() {
		return sCICellType;
	}
	
	public SCIDirection getSCIDirection() {
		return sCIDirection;
	}
	
	public void raiseNewTarget() {
		sCInterface.raiseNewTarget();
	}
	
	public void raiseActionCompleted() {
		sCInterface.raiseActionCompleted();
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr0_tr0() {
		return (sCIData.operationCallback.targetDirection()==sCIDirection.getRIGHT() && !sCIData.operationCallback.blockedArrivalpointRight());
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr1_tr1() {
		return (sCIData.operationCallback.targetDirection()==sCIDirection.getAHEAD() && !sCIData.operationCallback.blockedArrivalpointAhead());
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr2_tr2() {
		return (sCIData.operationCallback.targetDirection()==sCIDirection.getLEFT() && !sCIData.operationCallback.blockedArrivalpointAhead());
	}
	
	private boolean check_tlRobot_driving__driving__choice_2_tr0_tr0() {
		return sCIData.operationCallback.isOnTarget();
	}
	
	private boolean check_tlRobot_driving__driving__choice_2_tr1_tr1() {
		return sCIData.operationCallback.cellType()==sCICellType.getTRAFFICLIGHT_GREEN();
	}
	
	private boolean check_tlRobot_driving__driving__choice_3_tr0_tr0() {
		return sCIData.operationCallback.targetDirection()==sCIDirection.getRIGHT();
	}
	
	private boolean check_tlRobot_driving__driving__choice_3_tr1_tr1() {
		return sCIData.operationCallback.targetDirection()==sCIDirection.getLEFT();
	}
	
	private void effect_tlRobot_driving_tr0() {
		exitSequence_tlRobot_driving();
		sCIProcessor.raiseArrived();
		
		enterSequence_tlRobot_idle_default();
		react();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_ahead_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_to_right_side_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_to_left_side_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr0() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr1() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr2() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr3() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_1_tr0() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr0() {
		react_tlRobot_driving__driving__exit_Default();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr1() {
		react_tlRobot_driving__driving__choice_0();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr2() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr0() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr1() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr2() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead_default();
	}
	
	/* Entry action for state 'waiting on trafficlight'. */
	private void entryAction_tlRobot_driving__driving_waiting_on_trafficlight() {
		timer.setTimer(this, 0, 500, false);
	}
	
	/* Entry action for state 'forward2'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward1'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'right'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right() {
		sCIActors.raiseTurnRight();
	}
	
	/* Entry action for state 'forward'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward1'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'left'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left() {
		sCIActors.raiseTurnLeft();
	}
	
	/* Entry action for state 'forward2'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward3'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3() {
		sCIActors.raiseDriveForward();
	}
	
	/* Entry action for state 'entering crossroad'. */
	private void entryAction_tlRobot_driving__driving_entering_crossroad() {
		sCIActors.raiseDriveForward();
	}
	
	/* Exit action for state 'waiting on trafficlight'. */
	private void exitAction_tlRobot_driving__driving_waiting_on_trafficlight() {
		timer.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_tlRobot_idle_default() {
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_idle;
	}
	
	/* 'default' enter sequence for state driving */
	private void enterSequence_tlRobot_driving_default() {
		enterSequence_tlRobot_driving__driving_default();
	}
	
	/* 'default' enter sequence for state waiting on trafficlight */
	private void enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default() {
		entryAction_tlRobot_driving__driving_waiting_on_trafficlight();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_waiting_on_trafficlight;
	}
	
	/* 'default' enter sequence for state leaving crossroad ahead */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_default();
	}
	
	/* 'default' enter sequence for state forward2 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2;
	}
	
	/* 'default' enter sequence for state forward1 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1;
	}
	
	/* 'default' enter sequence for state leaving crossroad to right side */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_default();
	}
	
	/* 'default' enter sequence for state right */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right;
	}
	
	/* 'default' enter sequence for state forward */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward;
	}
	
	/* 'default' enter sequence for state leaving crossroad to left side */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default();
	}
	
	/* 'default' enter sequence for state forward1 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1;
	}
	
	/* 'default' enter sequence for state left */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left;
	}
	
	/* 'default' enter sequence for state forward2 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2;
	}
	
	/* 'default' enter sequence for state forward3 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3;
	}
	
	/* 'default' enter sequence for state entering crossroad */
	private void enterSequence_tlRobot_driving__driving_entering_crossroad_default() {
		entryAction_tlRobot_driving__driving_entering_crossroad();
		nextStateIndex = 0;
		stateVector[0] = State.tlRobot_driving__driving_entering_crossroad;
	}
	
	/* 'default' enter sequence for region tlRobot */
	private void enterSequence_tlRobot_default() {
		react_tlRobot__entry_Default();
	}
	
	/* 'default' enter sequence for region _driving */
	private void enterSequence_tlRobot_driving__driving_default() {
		react_tlRobot_driving__driving__entry_Default();
	}
	
	/* 'default' enter sequence for region _leavingCrossroadAhead */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_default() {
		react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveRight */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_default() {
		react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveLeft */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default() {
		react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default();
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_tlRobot_idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state driving */
	private void exitSequence_tlRobot_driving() {
		exitSequence_tlRobot_driving__driving();
	}
	
	/* Default exit sequence for state waiting on trafficlight */
	private void exitSequence_tlRobot_driving__driving_waiting_on_trafficlight() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_tlRobot_driving__driving_waiting_on_trafficlight();
	}
	
	/* Default exit sequence for state leaving crossroad ahead */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead();
	}
	
	/* Default exit sequence for state forward2 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state forward1 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state leaving crossroad to right side */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight();
	}
	
	/* Default exit sequence for state right */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state forward */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state leaving crossroad to left side */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft();
	}
	
	/* Default exit sequence for state forward1 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state left */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state forward2 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state forward3 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state entering crossroad */
	private void exitSequence_tlRobot_driving__driving_entering_crossroad() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region tlRobot */
	private void exitSequence_tlRobot() {
		switch (stateVector[0]) {
		case tlRobot_idle:
			exitSequence_tlRobot_idle();
			break;
		case tlRobot_driving__driving_waiting_on_trafficlight:
			exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
			break;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		case tlRobot_driving__driving_entering_crossroad:
			exitSequence_tlRobot_driving__driving_entering_crossroad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _driving */
	private void exitSequence_tlRobot_driving__driving() {
		switch (stateVector[0]) {
		case tlRobot_driving__driving_waiting_on_trafficlight:
			exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
			break;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		case tlRobot_driving__driving_entering_crossroad:
			exitSequence_tlRobot_driving__driving_entering_crossroad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _leavingCrossroadAhead */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead() {
		switch (stateVector[0]) {
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveRight */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight() {
		switch (stateVector[0]) {
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveLeft */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft() {
		switch (stateVector[0]) {
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_0() {
		if (check_tlRobot_driving__driving__choice_0_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_0_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_0_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_0_tr1();
			} else {
				if (check_tlRobot_driving__driving__choice_0_tr2_tr2()) {
					effect_tlRobot_driving__driving__choice_0_tr2();
				} else {
					effect_tlRobot_driving__driving__choice_0_tr3();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_1() {
		effect_tlRobot_driving__driving__choice_1_tr0();
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_2() {
		if (check_tlRobot_driving__driving__choice_2_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_2_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_2_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_2_tr1();
			} else {
				effect_tlRobot_driving__driving__choice_2_tr2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_3() {
		if (check_tlRobot_driving__driving__choice_3_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_3_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_3_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_3_tr1();
			} else {
				effect_tlRobot_driving__driving__choice_3_tr2();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot__entry_Default() {
		enterSequence_tlRobot_idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving__entry_Default() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_ahead_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_to_right_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_to_left_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving__exit_Default() {
		effect_tlRobot_driving_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean tlRobot_idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.newTarget) {
				exitSequence_tlRobot_idle();
				enterSequence_tlRobot_driving_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_waiting_on_trafficlight_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
				react_tlRobot_driving__driving__choice_2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
				react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_default();
				tlRobot_driving__driving_leaving_crossroad_ahead_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_default();
				tlRobot_driving__driving_leaving_crossroad_to_right_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
				react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
				react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_entering_crossroad_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.actionCompleted) {
				exitSequence_tlRobot_driving__driving_entering_crossroad();
				react_tlRobot_driving__driving__choice_3();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
}
