/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.tlrobot;

import de.hpi.mod.sim.IStatemachine;
import de.hpi.mod.sim.ITimerCallback;

public interface ITlRobotStatemachine extends ITimerCallback,IStatemachine {
	public interface SCInterface {
	
		public void raiseNewTarget();
		
		public void raiseActionCompleted();
		
	}
	
	public SCInterface getSCInterface();
	
	public interface SCIProcessor {
	
		public boolean isRaisedArrived();
		
	}
	
	public SCIProcessor getSCIProcessor();
	
	public interface SCIActors {
	
		public boolean isRaisedDriveForward();
		
		public boolean isRaisedTurnLeft();
		
		public boolean isRaisedTurnRight();
		
	}
	
	public SCIActors getSCIActors();
	
	public interface SCIData {
	
		public void setSCIDataOperationCallback(SCIDataOperationCallback operationCallback);
	
	}
	
	public interface SCIDataOperationCallback {
	
		public long cellType();
		
		public long targetDirection();
		
		public boolean isOnTarget();
		
		public boolean blockedArrivalpointAhead();
		
		public boolean blockedArrivalpointLeft();
		
		public boolean blockedArrivalpointRight();
		
	}
	
	public SCIData getSCIData();
	
	public interface SCICellType {
	
		public long getTRAFFICLIGHT_RED();
		
		public void setTRAFFICLIGHT_RED(long value);
		
		public long getTRAFFICLIGHT_GREEN();
		
		public void setTRAFFICLIGHT_GREEN(long value);
		
		public long getCROSSROAD();
		
		public void setCROSSROAD(long value);
		
		public long getBLOCKED();
		
		public void setBLOCKED(long value);
		
		public long getARRIVAL_POINT();
		
		public void setARRIVAL_POINT(long value);
		
	}
	
	public SCICellType getSCICellType();
	
	public interface SCIDirection {
	
		public long getLEFT();
		
		public void setLEFT(long value);
		
		public long getAHEAD();
		
		public void setAHEAD(long value);
		
		public long getRIGHT();
		
		public void setRIGHT(long value);
		
		public long getBEHIND();
		
		public void setBEHIND(long value);
		
	}
	
	public SCIDirection getSCIDirection();
	
}
