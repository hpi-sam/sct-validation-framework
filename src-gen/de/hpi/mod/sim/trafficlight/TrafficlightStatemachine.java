/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.trafficlight;

import de.hpi.mod.sim.ITimer;

public class TrafficlightStatemachine implements ITrafficlightStatemachine {
	protected class SCINorthImpl implements SCINorth {
	
		private boolean on;
		
		
		public boolean isRaisedOn() {
			return on;
		}
		
		protected void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public boolean isRaisedOff() {
			return off;
		}
		
		protected void raiseOff() {
			off = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		on = false;
		off = false;
		}
		
	}
	
	
	protected class SCIEastImpl implements SCIEast {
	
		private boolean on;
		
		
		public boolean isRaisedOn() {
			return on;
		}
		
		protected void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public boolean isRaisedOff() {
			return off;
		}
		
		protected void raiseOff() {
			off = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		on = false;
		off = false;
		}
		
	}
	
	
	protected class SCISouthImpl implements SCISouth {
	
		private boolean on;
		
		
		public boolean isRaisedOn() {
			return on;
		}
		
		protected void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public boolean isRaisedOff() {
			return off;
		}
		
		protected void raiseOff() {
			off = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		on = false;
		off = false;
		}
		
	}
	
	
	protected class SCIWestImpl implements SCIWest {
	
		private boolean on;
		
		
		public boolean isRaisedOn() {
			return on;
		}
		
		protected void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public boolean isRaisedOff() {
			return off;
		}
		
		protected void raiseOff() {
			off = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		on = false;
		off = false;
		}
		
	}
	
	
	protected SCINorthImpl sCINorth;
	
	protected SCIEastImpl sCIEast;
	
	protected SCISouthImpl sCISouth;
	
	protected SCIWestImpl sCIWest;
	
	private boolean initialized = false;
	
	public enum State {
		trafficlight_Off,
		trafficlight_North,
		trafficlight_East,
		trafficlight_West,
		trafficlight_WaitEast,
		trafficlight_WaitSouth,
		trafficlight_WaitWest,
		trafficlight_WaitNorth,
		trafficlight_South,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[9];
	
	public TrafficlightStatemachine() {
		sCINorth = new SCINorthImpl();
		sCIEast = new SCIEastImpl();
		sCISouth = new SCISouthImpl();
		sCIWest = new SCIWestImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_trafficlight_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case trafficlight_Off:
				trafficlight_Off_react(true);
				break;
			case trafficlight_North:
				trafficlight_North_react(true);
				break;
			case trafficlight_East:
				trafficlight_East_react(true);
				break;
			case trafficlight_West:
				trafficlight_West_react(true);
				break;
			case trafficlight_WaitEast:
				trafficlight_WaitEast_react(true);
				break;
			case trafficlight_WaitSouth:
				trafficlight_WaitSouth_react(true);
				break;
			case trafficlight_WaitWest:
				trafficlight_WaitWest_react(true);
				break;
			case trafficlight_WaitNorth:
				trafficlight_WaitNorth_react(true);
				break;
			case trafficlight_South:
				trafficlight_South_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_trafficlight();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCINorth.clearEvents();
		sCIEast.clearEvents();
		sCISouth.clearEvents();
		sCIWest.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCINorth.clearOutEvents();
		sCIEast.clearOutEvents();
		sCISouth.clearOutEvents();
		sCIWest.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case trafficlight_Off:
			return stateVector[0] == State.trafficlight_Off;
		case trafficlight_North:
			return stateVector[0] == State.trafficlight_North;
		case trafficlight_East:
			return stateVector[0] == State.trafficlight_East;
		case trafficlight_West:
			return stateVector[0] == State.trafficlight_West;
		case trafficlight_WaitEast:
			return stateVector[0] == State.trafficlight_WaitEast;
		case trafficlight_WaitSouth:
			return stateVector[0] == State.trafficlight_WaitSouth;
		case trafficlight_WaitWest:
			return stateVector[0] == State.trafficlight_WaitWest;
		case trafficlight_WaitNorth:
			return stateVector[0] == State.trafficlight_WaitNorth;
		case trafficlight_South:
			return stateVector[0] == State.trafficlight_South;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCINorth getSCINorth() {
		return sCINorth;
	}
	
	public SCIEast getSCIEast() {
		return sCIEast;
	}
	
	public SCISouth getSCISouth() {
		return sCISouth;
	}
	
	public SCIWest getSCIWest() {
		return sCIWest;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_trafficlight_Off() {
		timer.setTimer(this, 0, (2 * 1000), false);
	}
	
	/* Entry action for state 'North'. */
	private void entryAction_trafficlight_North() {
		timer.setTimer(this, 1, (3 * 1000), false);
		
		sCINorth.raiseOn();
	}
	
	/* Entry action for state 'East'. */
	private void entryAction_trafficlight_East() {
		timer.setTimer(this, 2, (3 * 1000), false);
		
		sCIEast.raiseOn();
	}
	
	/* Entry action for state 'West'. */
	private void entryAction_trafficlight_West() {
		timer.setTimer(this, 3, (3 * 1000), false);
		
		sCIWest.raiseOn();
	}
	
	/* Entry action for state 'WaitEast'. */
	private void entryAction_trafficlight_WaitEast() {
		timer.setTimer(this, 4, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitSouth'. */
	private void entryAction_trafficlight_WaitSouth() {
		timer.setTimer(this, 5, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitWest'. */
	private void entryAction_trafficlight_WaitWest() {
		timer.setTimer(this, 6, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitNorth'. */
	private void entryAction_trafficlight_WaitNorth() {
		timer.setTimer(this, 7, (1 * 1000), false);
	}
	
	/* Entry action for state 'South'. */
	private void entryAction_trafficlight_South() {
		timer.setTimer(this, 8, (3 * 1000), false);
		
		sCISouth.raiseOn();
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_trafficlight_Off() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'North'. */
	private void exitAction_trafficlight_North() {
		timer.unsetTimer(this, 1);
		
		sCINorth.raiseOff();
	}
	
	/* Exit action for state 'East'. */
	private void exitAction_trafficlight_East() {
		timer.unsetTimer(this, 2);
		
		sCIEast.raiseOff();
	}
	
	/* Exit action for state 'West'. */
	private void exitAction_trafficlight_West() {
		timer.unsetTimer(this, 3);
		
		sCIWest.raiseOff();
	}
	
	/* Exit action for state 'WaitEast'. */
	private void exitAction_trafficlight_WaitEast() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'WaitSouth'. */
	private void exitAction_trafficlight_WaitSouth() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'WaitWest'. */
	private void exitAction_trafficlight_WaitWest() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'WaitNorth'. */
	private void exitAction_trafficlight_WaitNorth() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'South'. */
	private void exitAction_trafficlight_South() {
		timer.unsetTimer(this, 8);
		
		sCISouth.raiseOff();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_trafficlight_Off_default() {
		entryAction_trafficlight_Off();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_Off;
	}
	
	/* 'default' enter sequence for state North */
	private void enterSequence_trafficlight_North_default() {
		entryAction_trafficlight_North();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_North;
	}
	
	/* 'default' enter sequence for state East */
	private void enterSequence_trafficlight_East_default() {
		entryAction_trafficlight_East();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_East;
	}
	
	/* 'default' enter sequence for state West */
	private void enterSequence_trafficlight_West_default() {
		entryAction_trafficlight_West();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_West;
	}
	
	/* 'default' enter sequence for state WaitEast */
	private void enterSequence_trafficlight_WaitEast_default() {
		entryAction_trafficlight_WaitEast();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_WaitEast;
	}
	
	/* 'default' enter sequence for state WaitSouth */
	private void enterSequence_trafficlight_WaitSouth_default() {
		entryAction_trafficlight_WaitSouth();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_WaitSouth;
	}
	
	/* 'default' enter sequence for state WaitWest */
	private void enterSequence_trafficlight_WaitWest_default() {
		entryAction_trafficlight_WaitWest();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_WaitWest;
	}
	
	/* 'default' enter sequence for state WaitNorth */
	private void enterSequence_trafficlight_WaitNorth_default() {
		entryAction_trafficlight_WaitNorth();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_WaitNorth;
	}
	
	/* 'default' enter sequence for state South */
	private void enterSequence_trafficlight_South_default() {
		entryAction_trafficlight_South();
		nextStateIndex = 0;
		stateVector[0] = State.trafficlight_South;
	}
	
	/* 'default' enter sequence for region trafficlight */
	private void enterSequence_trafficlight_default() {
		react_trafficlight__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_trafficlight_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_Off();
	}
	
	/* Default exit sequence for state North */
	private void exitSequence_trafficlight_North() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_North();
	}
	
	/* Default exit sequence for state East */
	private void exitSequence_trafficlight_East() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_East();
	}
	
	/* Default exit sequence for state West */
	private void exitSequence_trafficlight_West() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_West();
	}
	
	/* Default exit sequence for state WaitEast */
	private void exitSequence_trafficlight_WaitEast() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_WaitEast();
	}
	
	/* Default exit sequence for state WaitSouth */
	private void exitSequence_trafficlight_WaitSouth() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_WaitSouth();
	}
	
	/* Default exit sequence for state WaitWest */
	private void exitSequence_trafficlight_WaitWest() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_WaitWest();
	}
	
	/* Default exit sequence for state WaitNorth */
	private void exitSequence_trafficlight_WaitNorth() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_WaitNorth();
	}
	
	/* Default exit sequence for state South */
	private void exitSequence_trafficlight_South() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_trafficlight_South();
	}
	
	/* Default exit sequence for region trafficlight */
	private void exitSequence_trafficlight() {
		switch (stateVector[0]) {
		case trafficlight_Off:
			exitSequence_trafficlight_Off();
			break;
		case trafficlight_North:
			exitSequence_trafficlight_North();
			break;
		case trafficlight_East:
			exitSequence_trafficlight_East();
			break;
		case trafficlight_West:
			exitSequence_trafficlight_West();
			break;
		case trafficlight_WaitEast:
			exitSequence_trafficlight_WaitEast();
			break;
		case trafficlight_WaitSouth:
			exitSequence_trafficlight_WaitSouth();
			break;
		case trafficlight_WaitWest:
			exitSequence_trafficlight_WaitWest();
			break;
		case trafficlight_WaitNorth:
			exitSequence_trafficlight_WaitNorth();
			break;
		case trafficlight_South:
			exitSequence_trafficlight_South();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_trafficlight__entry_Default() {
		enterSequence_trafficlight_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean trafficlight_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_trafficlight_Off();
				enterSequence_trafficlight_North_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_North_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_trafficlight_North();
				enterSequence_trafficlight_WaitEast_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_East_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_trafficlight_East();
				enterSequence_trafficlight_WaitSouth_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_West_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_trafficlight_West();
				enterSequence_trafficlight_WaitNorth_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitEast_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_trafficlight_WaitEast();
				enterSequence_trafficlight_East_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitSouth_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_trafficlight_WaitSouth();
				enterSequence_trafficlight_South_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitWest_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_trafficlight_WaitWest();
				enterSequence_trafficlight_West_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitNorth_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_trafficlight_WaitNorth();
				enterSequence_trafficlight_North_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_South_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_trafficlight_South();
				enterSequence_trafficlight_WaitWest_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
