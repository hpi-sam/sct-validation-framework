/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class TlRobot implements IStatemachine, ITimed {
	public static class Processor {
		private boolean arrived;
		
		
		protected void raiseArrived() {
			arrived = true;
		}
		public boolean isRaisedArrived() {
			return arrived;
		}
		
		
	}
	
	public static class Actors {
		private boolean driveForward;
		
		
		protected void raiseDriveForward() {
			driveForward = true;
		}
		public boolean isRaisedDriveForward() {
			return driveForward;
		}
		
		
		private boolean turnLeft;
		
		
		protected void raiseTurnLeft() {
			turnLeft = true;
		}
		public boolean isRaisedTurnLeft() {
			return turnLeft;
		}
		
		
		private boolean turnRight;
		
		
		protected void raiseTurnRight() {
			turnRight = true;
		}
		public boolean isRaisedTurnRight() {
			return turnRight;
		}
		
		
	}
	
	public static class Data {
		public interface OperationCallback {
		
			public long cellType();
			
			public long targetDirection();
			
			public boolean isOnTarget();
			
			public boolean blockedArrivalpointAhead();
			
			public boolean blockedArrivalpointLeft();
			
			public boolean blockedArrivalpointRight();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class CellType {
		private long tRAFFICLIGHT_RED;
		
		public long getTRAFFICLIGHT_RED() {
			return tRAFFICLIGHT_RED;
		}
		
		public void setTRAFFICLIGHT_RED(long value) {
			this.tRAFFICLIGHT_RED = value;
		}
		
		private long tRAFFICLIGHT_GREEN;
		
		public long getTRAFFICLIGHT_GREEN() {
			return tRAFFICLIGHT_GREEN;
		}
		
		public void setTRAFFICLIGHT_GREEN(long value) {
			this.tRAFFICLIGHT_GREEN = value;
		}
		
		private long cROSSROAD;
		
		public long getCROSSROAD() {
			return cROSSROAD;
		}
		
		public void setCROSSROAD(long value) {
			this.cROSSROAD = value;
		}
		
		private long bLOCKED;
		
		public long getBLOCKED() {
			return bLOCKED;
		}
		
		public void setBLOCKED(long value) {
			this.bLOCKED = value;
		}
		
		private long aRRIVAL_POINT;
		
		public long getARRIVAL_POINT() {
			return aRRIVAL_POINT;
		}
		
		public void setARRIVAL_POINT(long value) {
			this.aRRIVAL_POINT = value;
		}
		
	}
	
	public static class Direction {
		private long lEFT;
		
		public long getLEFT() {
			return lEFT;
		}
		
		public void setLEFT(long value) {
			this.lEFT = value;
		}
		
		private long aHEAD;
		
		public long getAHEAD() {
			return aHEAD;
		}
		
		public void setAHEAD(long value) {
			this.aHEAD = value;
		}
		
		private long rIGHT;
		
		public long getRIGHT() {
			return rIGHT;
		}
		
		public void setRIGHT(long value) {
			this.rIGHT = value;
		}
		
		private long bEHIND;
		
		public long getBEHIND() {
			return bEHIND;
		}
		
		public void setBEHIND(long value) {
			this.bEHIND = value;
		}
		
	}
	
	protected Processor processor;
	
	protected Actors actors;
	
	protected Data data;
	
	protected CellType cellType;
	
	protected Direction direction;
	
	public enum State {
		TLROBOT_IDLE,
		TLROBOT_DRIVING,
		TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2,
		TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3,
		TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TlRobot() {
		processor = new Processor();
		actors = new Actors();
		data = new Data();
		cellType = new CellType();
		direction = new Direction();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearOutEvents();
		
		cellType.setTRAFFICLIGHT_RED(0);
		
		cellType.setTRAFFICLIGHT_GREEN(1);
		
		cellType.setCROSSROAD(2);
		
		cellType.setBLOCKED(3);
		
		cellType.setARRIVAL_POINT(4);
		
		direction.setLEFT(0);
		
		direction.setAHEAD(1);
		
		direction.setRIGHT(2);
		
		direction.setBEHIND(3);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.data.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Data must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_tlRobot_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_tlRobot();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		processor.arrived = false;
		actors.driveForward = false;
		actors.turnLeft = false;
		actors.turnRight = false;
	}
	
	private void clearInEvents() {
		newTarget = false;
		actionCompleted = false;
		timeEvents[0] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.data.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Data must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case TLROBOT_IDLE:
					tlRobot_idle_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT:
					tlRobot_driving__driving_waiting_on_trafficlight_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2:
					tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1:
					tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT:
					tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD:
					tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1:
					tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT:
					tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2:
					tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3:
					tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_react(true);
					break;
				case TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD:
					tlRobot_driving__driving_entering_crossroad_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while (((newTarget || actionCompleted) || timeEvents[0]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case TLROBOT_IDLE:
			return stateVector[0] == State.TLROBOT_IDLE;
		case TLROBOT_DRIVING:
			return stateVector[0].ordinal() >= State.
					TLROBOT_DRIVING.ordinal()&& stateVector[0].ordinal() <= State.TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD.ordinal();
		case TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD:
			return stateVector[0].ordinal() >= State.
					TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD.ordinal()&& stateVector[0].ordinal() <= State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1.ordinal();
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE:
			return stateVector[0].ordinal() >= State.
					TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE.ordinal()&& stateVector[0].ordinal() <= State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD.ordinal();
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE:
			return stateVector[0].ordinal() >= State.
					TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE.ordinal()&& stateVector[0].ordinal() <= State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3.ordinal();
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3;
		case TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD:
			return stateVector[0] == State.TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public Processor processor() {
		return processor;
	}
	
	public Actors actors() {
		return actors;
	}
	
	public Data data() {
		return data;
	}
	
	public CellType cellType() {
		return cellType;
	}
	
	public Direction direction() {
		return direction;
	}
	
	private boolean newTarget;
	
	
	public void raiseNewTarget() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				newTarget = true;
			}
		});
		runCycle();
	}
	
	private boolean actionCompleted;
	
	
	public void raiseActionCompleted() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				actionCompleted = true;
			}
		});
		runCycle();
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr0_tr0() {
		return (data.operationCallback.targetDirection()==direction.getRIGHT() && !data.operationCallback.blockedArrivalpointRight());
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr1_tr1() {
		return (data.operationCallback.targetDirection()==direction.getAHEAD() && !data.operationCallback.blockedArrivalpointAhead());
	}
	
	private boolean check_tlRobot_driving__driving__choice_0_tr2_tr2() {
		return (data.operationCallback.targetDirection()==direction.getLEFT() && !data.operationCallback.blockedArrivalpointAhead());
	}
	
	private boolean check_tlRobot_driving__driving__choice_2_tr0_tr0() {
		return data.operationCallback.isOnTarget();
	}
	
	private boolean check_tlRobot_driving__driving__choice_2_tr1_tr1() {
		return data.operationCallback.cellType()==cellType.getTRAFFICLIGHT_GREEN();
	}
	
	private boolean check_tlRobot_driving__driving__choice_3_tr0_tr0() {
		return data.operationCallback.targetDirection()==direction.getRIGHT();
	}
	
	private boolean check_tlRobot_driving__driving__choice_3_tr1_tr1() {
		return data.operationCallback.targetDirection()==direction.getLEFT();
	}
	
	private void effect_tlRobot_driving_tr0() {
		exitSequence_tlRobot_driving();
		processor.raiseArrived();
		
		enterSequence_tlRobot_idle_default();
		react();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_ahead_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_to_right_side_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving_leaving_crossroad_to_left_side_tr0() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side();
		react_tlRobot_driving__driving__choice_1();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr0() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr1() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr2() {
		enterSequence_tlRobot_driving__driving_entering_crossroad_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_0_tr3() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_1_tr0() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr0() {
		react_tlRobot_driving__driving__exit_Default();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr1() {
		react_tlRobot_driving__driving__choice_0();
	}
	
	private void effect_tlRobot_driving__driving__choice_2_tr2() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr0() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr1() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side_default();
	}
	
	private void effect_tlRobot_driving__driving__choice_3_tr2() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead_default();
	}
	
	/* Entry action for state 'waiting on trafficlight'. */
	private void entryAction_tlRobot_driving__driving_waiting_on_trafficlight() {
		timerService.setTimer(this, 0, 500, false);
	}
	
	/* Entry action for state 'forward2'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward1'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'right'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right() {
		actors.raiseTurnRight();
	}
	
	/* Entry action for state 'forward'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward1'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'left'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left() {
		actors.raiseTurnLeft();
	}
	
	/* Entry action for state 'forward2'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'forward3'. */
	private void entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'entering crossroad'. */
	private void entryAction_tlRobot_driving__driving_entering_crossroad() {
		actors.raiseDriveForward();
	}
	
	/* Exit action for state 'waiting on trafficlight'. */
	private void exitAction_tlRobot_driving__driving_waiting_on_trafficlight() {
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_tlRobot_idle_default() {
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_IDLE;
	}
	
	/* 'default' enter sequence for state driving */
	private void enterSequence_tlRobot_driving_default() {
		enterSequence_tlRobot_driving__driving_default();
	}
	
	/* 'default' enter sequence for state waiting on trafficlight */
	private void enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default() {
		entryAction_tlRobot_driving__driving_waiting_on_trafficlight();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT;
	}
	
	/* 'default' enter sequence for state leaving crossroad ahead */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_default();
	}
	
	/* 'default' enter sequence for state forward2 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2;
	}
	
	/* 'default' enter sequence for state forward1 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1;
	}
	
	/* 'default' enter sequence for state leaving crossroad to right side */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_default();
	}
	
	/* 'default' enter sequence for state right */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT;
	}
	
	/* 'default' enter sequence for state forward */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD;
	}
	
	/* 'default' enter sequence for state leaving crossroad to left side */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side_default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default();
	}
	
	/* 'default' enter sequence for state forward1 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1;
	}
	
	/* 'default' enter sequence for state left */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT;
	}
	
	/* 'default' enter sequence for state forward2 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2;
	}
	
	/* 'default' enter sequence for state forward3 */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_default() {
		entryAction_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3;
	}
	
	/* 'default' enter sequence for state entering crossroad */
	private void enterSequence_tlRobot_driving__driving_entering_crossroad_default() {
		entryAction_tlRobot_driving__driving_entering_crossroad();
		nextStateIndex = 0;
		stateVector[0] = State.TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD;
	}
	
	/* 'default' enter sequence for region tlRobot */
	private void enterSequence_tlRobot_default() {
		react_tlRobot__entry_Default();
	}
	
	/* 'default' enter sequence for region _driving */
	private void enterSequence_tlRobot_driving__driving_default() {
		react_tlRobot_driving__driving__entry_Default();
	}
	
	/* 'default' enter sequence for region _leavingCrossroadAhead */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_default() {
		react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveRight */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_default() {
		react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveLeft */
	private void enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default() {
		react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default();
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_tlRobot_idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state driving */
	private void exitSequence_tlRobot_driving() {
		exitSequence_tlRobot_driving__driving();
	}
	
	/* Default exit sequence for state waiting on trafficlight */
	private void exitSequence_tlRobot_driving__driving_waiting_on_trafficlight() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_tlRobot_driving__driving_waiting_on_trafficlight();
	}
	
	/* Default exit sequence for state leaving crossroad ahead */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead();
	}
	
	/* Default exit sequence for state forward2 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state forward1 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state leaving crossroad to right side */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight();
	}
	
	/* Default exit sequence for state right */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state forward */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state leaving crossroad to left side */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side() {
		exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft();
	}
	
	/* Default exit sequence for state forward1 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state left */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state forward2 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state forward3 */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state entering crossroad */
	private void exitSequence_tlRobot_driving__driving_entering_crossroad() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region tlRobot */
	private void exitSequence_tlRobot() {
		switch (stateVector[0]) {
		case TLROBOT_IDLE:
			exitSequence_tlRobot_idle();
			break;
		case TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT:
			exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		case TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD:
			exitSequence_tlRobot_driving__driving_entering_crossroad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _driving */
	private void exitSequence_tlRobot_driving__driving() {
		switch (stateVector[0]) {
		case TLROBOT_DRIVING__DRIVING_WAITING_ON_TRAFFICLIGHT:
			exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		case TLROBOT_DRIVING__DRIVING_ENTERING_CROSSROAD:
			exitSequence_tlRobot_driving__driving_entering_crossroad();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _leavingCrossroadAhead */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead() {
		switch (stateVector[0]) {
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveRight */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight() {
		switch (stateVector[0]) {
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_RIGHT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_FORWARD:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveLeft */
	private void exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft() {
		switch (stateVector[0]) {
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD1:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_LEFT:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD2:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
			break;
		case TLROBOT_DRIVING__DRIVING_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_FORWARD3:
			exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_0() {
		if (check_tlRobot_driving__driving__choice_0_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_0_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_0_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_0_tr1();
			} else {
				if (check_tlRobot_driving__driving__choice_0_tr2_tr2()) {
					effect_tlRobot_driving__driving__choice_0_tr2();
				} else {
					effect_tlRobot_driving__driving__choice_0_tr3();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_1() {
		effect_tlRobot_driving__driving__choice_1_tr0();
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_2() {
		if (check_tlRobot_driving__driving__choice_2_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_2_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_2_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_2_tr1();
			} else {
				effect_tlRobot_driving__driving__choice_2_tr2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_tlRobot_driving__driving__choice_3() {
		if (check_tlRobot_driving__driving__choice_3_tr0_tr0()) {
			effect_tlRobot_driving__driving__choice_3_tr0();
		} else {
			if (check_tlRobot_driving__driving__choice_3_tr1_tr1()) {
				effect_tlRobot_driving__driving__choice_3_tr1();
			} else {
				effect_tlRobot_driving__driving__choice_3_tr2();
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot__entry_Default() {
		enterSequence_tlRobot_idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default() {
		enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_tlRobot_driving__driving__entry_Default() {
		enterSequence_tlRobot_driving__driving_waiting_on_trafficlight_default();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_ahead_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_to_right_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default() {
		effect_tlRobot_driving__driving_leaving_crossroad_to_left_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_tlRobot_driving__driving__exit_Default() {
		effect_tlRobot_driving_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean tlRobot_idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (newTarget) {
				exitSequence_tlRobot_idle();
				enterSequence_tlRobot_driving_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_waiting_on_trafficlight_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_tlRobot_driving__driving_waiting_on_trafficlight();
				react_tlRobot_driving__driving__choice_2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2();
				react_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward1();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_ahead__leavingCrossroadAhead_forward2_default();
				tlRobot_driving__driving_leaving_crossroad_ahead_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_right();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_default();
				tlRobot_driving__driving_leaving_crossroad_to_right_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight_forward();
				react_tlRobot_driving__driving_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward1();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_left();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward2();
				enterSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_default();
				tlRobot_driving__driving_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft_forward3();
				react_tlRobot_driving__driving_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving__driving_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean tlRobot_driving__driving_entering_crossroad_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_tlRobot_driving__driving_entering_crossroad();
				react_tlRobot_driving__driving__choice_3();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = tlRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
}
