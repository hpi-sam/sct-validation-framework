/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.statemachines.simpletraffic;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class SimpleTrafficLightStatechart implements IStatemachine, ITimed {
	public static class NorthLamp {
		private boolean green;
		
		
		protected void raiseGreen() {
			green = true;
		}
		public boolean isRaisedGreen() {
			return green;
		}
		
		
		private boolean red;
		
		
		protected void raiseRed() {
			red = true;
		}
		public boolean isRaisedRed() {
			return red;
		}
		
		
	}
	
	public static class EastLamp {
		private boolean green;
		
		
		protected void raiseGreen() {
			green = true;
		}
		public boolean isRaisedGreen() {
			return green;
		}
		
		
		private boolean red;
		
		
		protected void raiseRed() {
			red = true;
		}
		public boolean isRaisedRed() {
			return red;
		}
		
		
	}
	
	public static class SouthLamp {
		private boolean green;
		
		
		protected void raiseGreen() {
			green = true;
		}
		public boolean isRaisedGreen() {
			return green;
		}
		
		
		private boolean red;
		
		
		protected void raiseRed() {
			red = true;
		}
		public boolean isRaisedRed() {
			return red;
		}
		
		
	}
	
	public static class WestLamp {
		private boolean green;
		
		
		protected void raiseGreen() {
			green = true;
		}
		public boolean isRaisedGreen() {
			return green;
		}
		
		
		private boolean red;
		
		
		protected void raiseRed() {
			red = true;
		}
		public boolean isRaisedRed() {
			return red;
		}
		
		
	}
	
	public static class CenterSensor {
		public interface OperationCallback {
		
			public boolean isFree();
			
			public boolean isOccupied();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class NorthSensor {
		public interface OperationCallback {
		
			public boolean isFree();
			
			public boolean isOccupied();
			
			public long getDirection();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class EastSensor {
		public interface OperationCallback {
		
			public boolean isFree();
			
			public boolean isOccupied();
			
			public long getDirection();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class SouthSensor {
		public interface OperationCallback {
		
			public boolean isFree();
			
			public boolean isOccupied();
			
			public long getDirection();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class WestSensor {
		public interface OperationCallback {
		
			public boolean isFree();
			
			public boolean isOccupied();
			
			public long getDirection();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class Direction {
		public static final long aHEAD = 0;
		
		public long getAHEAD() {
			return aHEAD;
		}
		
		public static final long lEFT = 1;
		
		public long getLEFT() {
			return lEFT;
		}
		
		public static final long rIGHT = 2;
		
		public long getRIGHT() {
			return rIGHT;
		}
		
	}
	
	protected NorthLamp northLamp;
	
	protected EastLamp eastLamp;
	
	protected SouthLamp southLamp;
	
	protected WestLamp westLamp;
	
	protected CenterSensor centerSensor;
	
	protected NorthSensor northSensor;
	
	protected EastSensor eastSensor;
	
	protected SouthSensor southSensor;
	
	protected WestSensor westSensor;
	
	protected Direction direction;
	
	public enum State {
		_SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN,
		_SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN,
		_SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN,
		_SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP,
		_SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP,
		_SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP,
		_SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP,
		_SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public SimpleTrafficLightStatechart() {
		northLamp = new NorthLamp();
		eastLamp = new EastLamp();
		southLamp = new SouthLamp();
		westLamp = new WestLamp();
		centerSensor = new CenterSensor();
		northSensor = new NorthSensor();
		eastSensor = new EastSensor();
		southSensor = new SouthSensor();
		westSensor = new WestSensor();
		direction = new Direction();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearOutEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.centerSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface CenterSensor must be set.");
		}
		
		if (this.northSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface NorthSensor must be set.");
		}
		
		if (this.eastSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface EastSensor must be set.");
		}
		
		if (this.southSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface SouthSensor must be set.");
		}
		
		if (this.westSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface WestSensor must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence__simpleTrafficLight_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence__simpleTrafficLight();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		northLamp.green = false;
		northLamp.red = false;
		eastLamp.green = false;
		eastLamp.red = false;
		southLamp.green = false;
		southLamp.red = false;
		westLamp.green = false;
		westLamp.red = false;
	}
	
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.centerSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface CenterSensor must be set.");
		}
		
		if (this.northSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface NorthSensor must be set.");
		}
		
		if (this.eastSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface EastSensor must be set.");
		}
		
		if (this.southSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface SouthSensor must be set.");
		}
		
		if (this.westSensor.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface WestSensor must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case _SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN:
					_simpleTrafficLight_North_Lamp_is_Green_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN:
					_simpleTrafficLight_East_Lamp_is_Green_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN:
					_simpleTrafficLight_West_Lamp_is_Green_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP:
					_simpleTrafficLight_Wait_to_light_East_Lamp_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP:
					_simpleTrafficLight_Wait_to_light_South_Lamp_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP:
					_simpleTrafficLight_Wait_to_light_West_Lamp_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP:
					_simpleTrafficLight_Wait_to_light_North_Lamp_react(true);
					break;
				case _SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN:
					_simpleTrafficLight_South_Lamp_is_Green_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while ((((((((timeEvents[0] || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case _SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN;
		case _SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN;
		case _SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP;
		case _SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN:
			return stateVector[0] == State._SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public NorthLamp northLamp() {
		return northLamp;
	}
	
	public EastLamp eastLamp() {
		return eastLamp;
	}
	
	public SouthLamp southLamp() {
		return southLamp;
	}
	
	public WestLamp westLamp() {
		return westLamp;
	}
	
	public CenterSensor centerSensor() {
		return centerSensor;
	}
	
	public NorthSensor northSensor() {
		return northSensor;
	}
	
	public EastSensor eastSensor() {
		return eastSensor;
	}
	
	public SouthSensor southSensor() {
		return southSensor;
	}
	
	public WestSensor westSensor() {
		return westSensor;
	}
	
	public Direction direction() {
		return direction;
	}
	
	/* Entry action for state 'North Lamp is Green'. */
	private void entryAction__simpleTrafficLight_North_Lamp_is_Green() {
		timerService.setTimer(this, 0, (3 * 1000), false);
		
		northLamp.raiseGreen();
	}
	
	/* Entry action for state 'East Lamp is Green'. */
	private void entryAction__simpleTrafficLight_East_Lamp_is_Green() {
		timerService.setTimer(this, 1, (3 * 1000), false);
		
		eastLamp.raiseGreen();
	}
	
	/* Entry action for state 'West Lamp is Green'. */
	private void entryAction__simpleTrafficLight_West_Lamp_is_Green() {
		timerService.setTimer(this, 2, (3 * 1000), false);
		
		westLamp.raiseGreen();
	}
	
	/* Entry action for state 'Wait to light East Lamp'. */
	private void entryAction__simpleTrafficLight_Wait_to_light_East_Lamp() {
		timerService.setTimer(this, 3, 100, true);
	}
	
	/* Entry action for state 'Wait to light South Lamp'. */
	private void entryAction__simpleTrafficLight_Wait_to_light_South_Lamp() {
		timerService.setTimer(this, 4, 100, true);
	}
	
	/* Entry action for state 'Wait to light West Lamp'. */
	private void entryAction__simpleTrafficLight_Wait_to_light_West_Lamp() {
		timerService.setTimer(this, 5, 100, true);
	}
	
	/* Entry action for state 'Wait to light North Lamp'. */
	private void entryAction__simpleTrafficLight_Wait_to_light_North_Lamp() {
		timerService.setTimer(this, 6, 100, true);
	}
	
	/* Entry action for state 'South Lamp is Green'. */
	private void entryAction__simpleTrafficLight_South_Lamp_is_Green() {
		timerService.setTimer(this, 7, (3 * 1000), false);
		
		southLamp.raiseGreen();
	}
	
	/* Exit action for state 'North Lamp is Green'. */
	private void exitAction__simpleTrafficLight_North_Lamp_is_Green() {
		timerService.unsetTimer(this, 0);
		
		northLamp.raiseRed();
	}
	
	/* Exit action for state 'East Lamp is Green'. */
	private void exitAction__simpleTrafficLight_East_Lamp_is_Green() {
		timerService.unsetTimer(this, 1);
		
		eastLamp.raiseRed();
	}
	
	/* Exit action for state 'West Lamp is Green'. */
	private void exitAction__simpleTrafficLight_West_Lamp_is_Green() {
		timerService.unsetTimer(this, 2);
		
		westLamp.raiseRed();
	}
	
	/* Exit action for state 'Wait to light East Lamp'. */
	private void exitAction__simpleTrafficLight_Wait_to_light_East_Lamp() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Wait to light South Lamp'. */
	private void exitAction__simpleTrafficLight_Wait_to_light_South_Lamp() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Wait to light West Lamp'. */
	private void exitAction__simpleTrafficLight_Wait_to_light_West_Lamp() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Wait to light North Lamp'. */
	private void exitAction__simpleTrafficLight_Wait_to_light_North_Lamp() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'South Lamp is Green'. */
	private void exitAction__simpleTrafficLight_South_Lamp_is_Green() {
		timerService.unsetTimer(this, 7);
		
		southLamp.raiseRed();
	}
	
	/* 'default' enter sequence for state North Lamp is Green */
	private void enterSequence__simpleTrafficLight_North_Lamp_is_Green_default() {
		entryAction__simpleTrafficLight_North_Lamp_is_Green();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN;
	}
	
	/* 'default' enter sequence for state East Lamp is Green */
	private void enterSequence__simpleTrafficLight_East_Lamp_is_Green_default() {
		entryAction__simpleTrafficLight_East_Lamp_is_Green();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN;
	}
	
	/* 'default' enter sequence for state West Lamp is Green */
	private void enterSequence__simpleTrafficLight_West_Lamp_is_Green_default() {
		entryAction__simpleTrafficLight_West_Lamp_is_Green();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN;
	}
	
	/* 'default' enter sequence for state Wait to light East Lamp */
	private void enterSequence__simpleTrafficLight_Wait_to_light_East_Lamp_default() {
		entryAction__simpleTrafficLight_Wait_to_light_East_Lamp();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP;
	}
	
	/* 'default' enter sequence for state Wait to light South Lamp */
	private void enterSequence__simpleTrafficLight_Wait_to_light_South_Lamp_default() {
		entryAction__simpleTrafficLight_Wait_to_light_South_Lamp();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP;
	}
	
	/* 'default' enter sequence for state Wait to light West Lamp */
	private void enterSequence__simpleTrafficLight_Wait_to_light_West_Lamp_default() {
		entryAction__simpleTrafficLight_Wait_to_light_West_Lamp();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP;
	}
	
	/* 'default' enter sequence for state Wait to light North Lamp */
	private void enterSequence__simpleTrafficLight_Wait_to_light_North_Lamp_default() {
		entryAction__simpleTrafficLight_Wait_to_light_North_Lamp();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP;
	}
	
	/* 'default' enter sequence for state South Lamp is Green */
	private void enterSequence__simpleTrafficLight_South_Lamp_is_Green_default() {
		entryAction__simpleTrafficLight_South_Lamp_is_Green();
		nextStateIndex = 0;
		stateVector[0] = State._SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN;
	}
	
	/* 'default' enter sequence for region _simpleTrafficLight */
	private void enterSequence__simpleTrafficLight_default() {
		react__simpleTrafficLight__entry_Default();
	}
	
	/* Default exit sequence for state North Lamp is Green */
	private void exitSequence__simpleTrafficLight_North_Lamp_is_Green() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_North_Lamp_is_Green();
	}
	
	/* Default exit sequence for state East Lamp is Green */
	private void exitSequence__simpleTrafficLight_East_Lamp_is_Green() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_East_Lamp_is_Green();
	}
	
	/* Default exit sequence for state West Lamp is Green */
	private void exitSequence__simpleTrafficLight_West_Lamp_is_Green() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_West_Lamp_is_Green();
	}
	
	/* Default exit sequence for state Wait to light East Lamp */
	private void exitSequence__simpleTrafficLight_Wait_to_light_East_Lamp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_Wait_to_light_East_Lamp();
	}
	
	/* Default exit sequence for state Wait to light South Lamp */
	private void exitSequence__simpleTrafficLight_Wait_to_light_South_Lamp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_Wait_to_light_South_Lamp();
	}
	
	/* Default exit sequence for state Wait to light West Lamp */
	private void exitSequence__simpleTrafficLight_Wait_to_light_West_Lamp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_Wait_to_light_West_Lamp();
	}
	
	/* Default exit sequence for state Wait to light North Lamp */
	private void exitSequence__simpleTrafficLight_Wait_to_light_North_Lamp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_Wait_to_light_North_Lamp();
	}
	
	/* Default exit sequence for state South Lamp is Green */
	private void exitSequence__simpleTrafficLight_South_Lamp_is_Green() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction__simpleTrafficLight_South_Lamp_is_Green();
	}
	
	/* Default exit sequence for region _simpleTrafficLight */
	private void exitSequence__simpleTrafficLight() {
		switch (stateVector[0]) {
		case _SIMPLETRAFFICLIGHT_NORTH_LAMP_IS_GREEN:
			exitSequence__simpleTrafficLight_North_Lamp_is_Green();
			break;
		case _SIMPLETRAFFICLIGHT_EAST_LAMP_IS_GREEN:
			exitSequence__simpleTrafficLight_East_Lamp_is_Green();
			break;
		case _SIMPLETRAFFICLIGHT_WEST_LAMP_IS_GREEN:
			exitSequence__simpleTrafficLight_West_Lamp_is_Green();
			break;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_EAST_LAMP:
			exitSequence__simpleTrafficLight_Wait_to_light_East_Lamp();
			break;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_SOUTH_LAMP:
			exitSequence__simpleTrafficLight_Wait_to_light_South_Lamp();
			break;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_WEST_LAMP:
			exitSequence__simpleTrafficLight_Wait_to_light_West_Lamp();
			break;
		case _SIMPLETRAFFICLIGHT_WAIT_TO_LIGHT_NORTH_LAMP:
			exitSequence__simpleTrafficLight_Wait_to_light_North_Lamp();
			break;
		case _SIMPLETRAFFICLIGHT_SOUTH_LAMP_IS_GREEN:
			exitSequence__simpleTrafficLight_South_Lamp_is_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react__simpleTrafficLight__entry_Default() {
		enterSequence__simpleTrafficLight_Wait_to_light_North_Lamp_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean _simpleTrafficLight_North_Lamp_is_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence__simpleTrafficLight_North_Lamp_is_Green();
				enterSequence__simpleTrafficLight_Wait_to_light_East_Lamp_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_East_Lamp_is_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence__simpleTrafficLight_East_Lamp_is_Green();
				enterSequence__simpleTrafficLight_Wait_to_light_South_Lamp_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_West_Lamp_is_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence__simpleTrafficLight_West_Lamp_is_Green();
				enterSequence__simpleTrafficLight_Wait_to_light_North_Lamp_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_Wait_to_light_East_Lamp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && (centerSensor.operationCallback.isFree()))) {
				exitSequence__simpleTrafficLight_Wait_to_light_East_Lamp();
				enterSequence__simpleTrafficLight_East_Lamp_is_Green_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_Wait_to_light_South_Lamp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && (centerSensor.operationCallback.isFree()))) {
				exitSequence__simpleTrafficLight_Wait_to_light_South_Lamp();
				enterSequence__simpleTrafficLight_South_Lamp_is_Green_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_Wait_to_light_West_Lamp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5]) && (centerSensor.operationCallback.isFree()))) {
				exitSequence__simpleTrafficLight_Wait_to_light_West_Lamp();
				enterSequence__simpleTrafficLight_West_Lamp_is_Green_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_Wait_to_light_North_Lamp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && (centerSensor.operationCallback.isFree()))) {
				exitSequence__simpleTrafficLight_Wait_to_light_North_Lamp();
				enterSequence__simpleTrafficLight_North_Lamp_is_Green_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean _simpleTrafficLight_South_Lamp_is_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence__simpleTrafficLight_South_Lamp_is_Green();
				enterSequence__simpleTrafficLight_Wait_to_light_West_Lamp_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
