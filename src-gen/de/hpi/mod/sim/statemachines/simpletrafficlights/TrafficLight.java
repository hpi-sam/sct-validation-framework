/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.statemachines.simpletrafficlights;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class TrafficLight implements IStatemachine, ITimed {
	public static class North {
		private boolean on;
		
		
		protected void raiseOn() {
			on = true;
		}
		public boolean isRaisedOn() {
			return on;
		}
		
		
		private boolean off;
		
		
		protected void raiseOff() {
			off = true;
		}
		public boolean isRaisedOff() {
			return off;
		}
		
		
	}
	
	public static class East {
		private boolean on;
		
		
		protected void raiseOn() {
			on = true;
		}
		public boolean isRaisedOn() {
			return on;
		}
		
		
		private boolean off;
		
		
		protected void raiseOff() {
			off = true;
		}
		public boolean isRaisedOff() {
			return off;
		}
		
		
	}
	
	public static class South {
		private boolean on;
		
		
		protected void raiseOn() {
			on = true;
		}
		public boolean isRaisedOn() {
			return on;
		}
		
		
		private boolean off;
		
		
		protected void raiseOff() {
			off = true;
		}
		public boolean isRaisedOff() {
			return off;
		}
		
		
	}
	
	public static class West {
		private boolean on;
		
		
		protected void raiseOn() {
			on = true;
		}
		public boolean isRaisedOn() {
			return on;
		}
		
		
		private boolean off;
		
		
		protected void raiseOff() {
			off = true;
		}
		public boolean isRaisedOff() {
			return off;
		}
		
		
	}
	
	protected North north;
	
	protected East east;
	
	protected South south;
	
	protected West west;
	
	public enum State {
		TRAFFICLIGHT_OFF,
		TRAFFICLIGHT_NORTH,
		TRAFFICLIGHT_EAST,
		TRAFFICLIGHT_WEST,
		TRAFFICLIGHT_WAITEAST,
		TRAFFICLIGHT_WAITSOUTH,
		TRAFFICLIGHT_WAITWEST,
		TRAFFICLIGHT_WAITNORTH,
		TRAFFICLIGHT_SOUTH,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[9];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public TrafficLight() {
		north = new North();
		east = new East();
		south = new South();
		west = new West();
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearOutEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_trafficlight_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_trafficlight();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		north.on = false;
		north.off = false;
		east.on = false;
		east.off = false;
		south.on = false;
		south.off = false;
		west.on = false;
		west.off = false;
	}
	
	private void clearInEvents() {
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case TRAFFICLIGHT_OFF:
					trafficlight_Off_react(true);
					break;
				case TRAFFICLIGHT_NORTH:
					trafficlight_North_react(true);
					break;
				case TRAFFICLIGHT_EAST:
					trafficlight_East_react(true);
					break;
				case TRAFFICLIGHT_WEST:
					trafficlight_West_react(true);
					break;
				case TRAFFICLIGHT_WAITEAST:
					trafficlight_WaitEast_react(true);
					break;
				case TRAFFICLIGHT_WAITSOUTH:
					trafficlight_WaitSouth_react(true);
					break;
				case TRAFFICLIGHT_WAITWEST:
					trafficlight_WaitWest_react(true);
					break;
				case TRAFFICLIGHT_WAITNORTH:
					trafficlight_WaitNorth_react(true);
					break;
				case TRAFFICLIGHT_SOUTH:
					trafficlight_South_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while (((((((((timeEvents[0] || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]) || timeEvents[8]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case TRAFFICLIGHT_OFF:
			return stateVector[0] == State.TRAFFICLIGHT_OFF;
		case TRAFFICLIGHT_NORTH:
			return stateVector[0] == State.TRAFFICLIGHT_NORTH;
		case TRAFFICLIGHT_EAST:
			return stateVector[0] == State.TRAFFICLIGHT_EAST;
		case TRAFFICLIGHT_WEST:
			return stateVector[0] == State.TRAFFICLIGHT_WEST;
		case TRAFFICLIGHT_WAITEAST:
			return stateVector[0] == State.TRAFFICLIGHT_WAITEAST;
		case TRAFFICLIGHT_WAITSOUTH:
			return stateVector[0] == State.TRAFFICLIGHT_WAITSOUTH;
		case TRAFFICLIGHT_WAITWEST:
			return stateVector[0] == State.TRAFFICLIGHT_WAITWEST;
		case TRAFFICLIGHT_WAITNORTH:
			return stateVector[0] == State.TRAFFICLIGHT_WAITNORTH;
		case TRAFFICLIGHT_SOUTH:
			return stateVector[0] == State.TRAFFICLIGHT_SOUTH;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public North north() {
		return north;
	}
	
	public East east() {
		return east;
	}
	
	public South south() {
		return south;
	}
	
	public West west() {
		return west;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_trafficlight_Off() {
		timerService.setTimer(this, 0, (2 * 1000), false);
	}
	
	/* Entry action for state 'North'. */
	private void entryAction_trafficlight_North() {
		timerService.setTimer(this, 1, (3 * 1000), false);
		
		north.raiseOn();
	}
	
	/* Entry action for state 'East'. */
	private void entryAction_trafficlight_East() {
		timerService.setTimer(this, 2, (3 * 1000), false);
		
		east.raiseOn();
	}
	
	/* Entry action for state 'West'. */
	private void entryAction_trafficlight_West() {
		timerService.setTimer(this, 3, (3 * 1000), false);
		
		west.raiseOn();
	}
	
	/* Entry action for state 'WaitEast'. */
	private void entryAction_trafficlight_WaitEast() {
		timerService.setTimer(this, 4, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitSouth'. */
	private void entryAction_trafficlight_WaitSouth() {
		timerService.setTimer(this, 5, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitWest'. */
	private void entryAction_trafficlight_WaitWest() {
		timerService.setTimer(this, 6, (1 * 1000), false);
	}
	
	/* Entry action for state 'WaitNorth'. */
	private void entryAction_trafficlight_WaitNorth() {
		timerService.setTimer(this, 7, (1 * 1000), false);
	}
	
	/* Entry action for state 'South'. */
	private void entryAction_trafficlight_South() {
		timerService.setTimer(this, 8, (3 * 1000), false);
		
		south.raiseOn();
	}
	
	/* Exit action for state 'Off'. */
	private void exitAction_trafficlight_Off() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'North'. */
	private void exitAction_trafficlight_North() {
		timerService.unsetTimer(this, 1);
		
		north.raiseOff();
	}
	
	/* Exit action for state 'East'. */
	private void exitAction_trafficlight_East() {
		timerService.unsetTimer(this, 2);
		
		east.raiseOff();
	}
	
	/* Exit action for state 'West'. */
	private void exitAction_trafficlight_West() {
		timerService.unsetTimer(this, 3);
		
		west.raiseOff();
	}
	
	/* Exit action for state 'WaitEast'. */
	private void exitAction_trafficlight_WaitEast() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'WaitSouth'. */
	private void exitAction_trafficlight_WaitSouth() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'WaitWest'. */
	private void exitAction_trafficlight_WaitWest() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'WaitNorth'. */
	private void exitAction_trafficlight_WaitNorth() {
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'South'. */
	private void exitAction_trafficlight_South() {
		timerService.unsetTimer(this, 8);
		
		south.raiseOff();
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_trafficlight_Off_default() {
		entryAction_trafficlight_Off();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_OFF;
	}
	
	/* 'default' enter sequence for state North */
	private void enterSequence_trafficlight_North_default() {
		entryAction_trafficlight_North();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_NORTH;
	}
	
	/* 'default' enter sequence for state East */
	private void enterSequence_trafficlight_East_default() {
		entryAction_trafficlight_East();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_EAST;
	}
	
	/* 'default' enter sequence for state West */
	private void enterSequence_trafficlight_West_default() {
		entryAction_trafficlight_West();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_WEST;
	}
	
	/* 'default' enter sequence for state WaitEast */
	private void enterSequence_trafficlight_WaitEast_default() {
		entryAction_trafficlight_WaitEast();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_WAITEAST;
	}
	
	/* 'default' enter sequence for state WaitSouth */
	private void enterSequence_trafficlight_WaitSouth_default() {
		entryAction_trafficlight_WaitSouth();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_WAITSOUTH;
	}
	
	/* 'default' enter sequence for state WaitWest */
	private void enterSequence_trafficlight_WaitWest_default() {
		entryAction_trafficlight_WaitWest();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_WAITWEST;
	}
	
	/* 'default' enter sequence for state WaitNorth */
	private void enterSequence_trafficlight_WaitNorth_default() {
		entryAction_trafficlight_WaitNorth();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_WAITNORTH;
	}
	
	/* 'default' enter sequence for state South */
	private void enterSequence_trafficlight_South_default() {
		entryAction_trafficlight_South();
		nextStateIndex = 0;
		stateVector[0] = State.TRAFFICLIGHT_SOUTH;
	}
	
	/* 'default' enter sequence for region trafficlight */
	private void enterSequence_trafficlight_default() {
		react_trafficlight__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_trafficlight_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_Off();
	}
	
	/* Default exit sequence for state North */
	private void exitSequence_trafficlight_North() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_North();
	}
	
	/* Default exit sequence for state East */
	private void exitSequence_trafficlight_East() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_East();
	}
	
	/* Default exit sequence for state West */
	private void exitSequence_trafficlight_West() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_West();
	}
	
	/* Default exit sequence for state WaitEast */
	private void exitSequence_trafficlight_WaitEast() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_WaitEast();
	}
	
	/* Default exit sequence for state WaitSouth */
	private void exitSequence_trafficlight_WaitSouth() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_WaitSouth();
	}
	
	/* Default exit sequence for state WaitWest */
	private void exitSequence_trafficlight_WaitWest() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_WaitWest();
	}
	
	/* Default exit sequence for state WaitNorth */
	private void exitSequence_trafficlight_WaitNorth() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_WaitNorth();
	}
	
	/* Default exit sequence for state South */
	private void exitSequence_trafficlight_South() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_trafficlight_South();
	}
	
	/* Default exit sequence for region trafficlight */
	private void exitSequence_trafficlight() {
		switch (stateVector[0]) {
		case TRAFFICLIGHT_OFF:
			exitSequence_trafficlight_Off();
			break;
		case TRAFFICLIGHT_NORTH:
			exitSequence_trafficlight_North();
			break;
		case TRAFFICLIGHT_EAST:
			exitSequence_trafficlight_East();
			break;
		case TRAFFICLIGHT_WEST:
			exitSequence_trafficlight_West();
			break;
		case TRAFFICLIGHT_WAITEAST:
			exitSequence_trafficlight_WaitEast();
			break;
		case TRAFFICLIGHT_WAITSOUTH:
			exitSequence_trafficlight_WaitSouth();
			break;
		case TRAFFICLIGHT_WAITWEST:
			exitSequence_trafficlight_WaitWest();
			break;
		case TRAFFICLIGHT_WAITNORTH:
			exitSequence_trafficlight_WaitNorth();
			break;
		case TRAFFICLIGHT_SOUTH:
			exitSequence_trafficlight_South();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_trafficlight__entry_Default() {
		enterSequence_trafficlight_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean trafficlight_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_trafficlight_Off();
				enterSequence_trafficlight_North_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_North_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_trafficlight_North();
				enterSequence_trafficlight_WaitEast_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_East_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_trafficlight_East();
				enterSequence_trafficlight_WaitSouth_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_West_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_trafficlight_West();
				enterSequence_trafficlight_WaitNorth_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitEast_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_trafficlight_WaitEast();
				enterSequence_trafficlight_East_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitSouth_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_trafficlight_WaitSouth();
				enterSequence_trafficlight_South_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitWest_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_trafficlight_WaitWest();
				enterSequence_trafficlight_West_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_WaitNorth_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_trafficlight_WaitNorth();
				enterSequence_trafficlight_North_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean trafficlight_South_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_trafficlight_South();
				enterSequence_trafficlight_WaitWest_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
