/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.statemachines.simpletrafficlights;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class RobotStatechart implements IStatemachine, ITimed {
	public static class Server {
		private boolean arrived;
		
		
		protected void raiseArrived() {
			arrived = true;
		}
		public boolean isRaisedArrived() {
			return arrived;
		}
		
		
	}
	
	public static class Actors {
		private boolean driveForward;
		
		
		protected void raiseDriveForward() {
			driveForward = true;
		}
		public boolean isRaisedDriveForward() {
			return driveForward;
		}
		
		
		private boolean turnLeft;
		
		
		protected void raiseTurnLeft() {
			turnLeft = true;
		}
		public boolean isRaisedTurnLeft() {
			return turnLeft;
		}
		
		
		private boolean turnRight;
		
		
		protected void raiseTurnRight() {
			turnRight = true;
		}
		public boolean isRaisedTurnRight() {
			return turnRight;
		}
		
		
	}
	
	public static class Sensors {
		public interface OperationCallback {
		
			public boolean isObstacleAhead();
			
			public boolean isTrafficLightAhead();
			
			public boolean trafficLightIsGreen();
			
			public boolean trafficLightIsRed();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	public static class Navigation {
		public interface OperationCallback {
		
			public boolean isOnTarget();
			
			public boolean isTargetAhead();
			
			public boolean isTargetLeft();
			
			public boolean isTargetRight();
			
			public boolean isTargetBehind();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	protected Server server;
	
	protected Actors actors;
	
	protected Sensors sensors;
	
	protected Navigation navigation;
	
	public enum State {
		SIMPLETRAFFICLIGHTROBOT_IDLE,
		SIMPLETRAFFICLIGHTROBOT_DRIVING,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED,
		SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean driveForwardWhenSafe;
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public RobotStatechart() {
		server = new Server();
		actors = new Actors();
		sensors = new Sensors();
		navigation = new Navigation();
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		clearOutEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.sensors.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Sensors must be set.");
		}
		
		if (this.navigation.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Navigation must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_simpleTrafficLightRobot_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_simpleTrafficLightRobot();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearOutEvents() {
		server.arrived = false;
		actors.driveForward = false;
		actors.turnLeft = false;
		actors.turnRight = false;
	}
	
	private void clearInEvents() {
		newTarget = false;
		actionCompleted = false;
		actionCompletedAndTrafficLightAhead = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
	}
	
	private void clearInternalEvents() {
		driveForwardWhenSafe = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.sensors.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Sensors must be set.");
		}
		
		if (this.navigation.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface Navigation must be set.");
		}
		
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		clearOutEvents();
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case SIMPLETRAFFICLIGHTROBOT_IDLE:
					simpleTrafficLightRobot_idle_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD:
					simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED:
					simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed_react(true);
					break;
				case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE:
					simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while ((((((newTarget || actionCompleted) || actionCompletedAndTrafficLightAhead) || driveForwardWhenSafe) || timeEvents[0]) || timeEvents[1]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case SIMPLETRAFFICLIGHTROBOT_IDLE:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_IDLE;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING:
			return stateVector[0].ordinal() >= State.
					SIMPLETRAFFICLIGHTROBOT_DRIVING.ordinal()&& stateVector[0].ordinal() <= State.SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE.ordinal();
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD:
			return stateVector[0].ordinal() >= State.
					SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD.ordinal()&& stateVector[0].ordinal() <= State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1.ordinal();
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE:
			return stateVector[0].ordinal() >= State.
					SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE.ordinal()&& stateVector[0].ordinal() <= State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD.ordinal();
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE:
			return stateVector[0].ordinal() >= State.
					SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE.ordinal()&& stateVector[0].ordinal() <= State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3.ordinal();
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD:
			return stateVector[0] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED:
			return stateVector[1] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE:
			return stateVector[1] == State.SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	public Server server() {
		return server;
	}
	
	public Actors actors() {
		return actors;
	}
	
	public Sensors sensors() {
		return sensors;
	}
	
	public Navigation navigation() {
		return navigation;
	}
	
	protected void raiseDriveForwardWhenSafe() {
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				driveForwardWhenSafe = true;
			}
		});
	}
	
	private boolean newTarget;
	
	
	public void raiseNewTarget() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				newTarget = true;
			}
		});
		runCycle();
	}
	
	private boolean actionCompleted;
	
	
	public void raiseActionCompleted() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				actionCompleted = true;
			}
		});
		runCycle();
	}
	
	private boolean actionCompletedAndTrafficLightAhead;
	
	
	public void raiseActionCompletedAndTrafficLightAhead() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				actionCompletedAndTrafficLightAhead = true;
			}
		});
		runCycle();
	}
	
	private boolean check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr0_tr0() {
		return navigation.operationCallback.isTargetAhead();
	}
	
	private boolean check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr0_tr0() {
		return navigation.operationCallback.isTargetLeft();
	}
	
	private boolean check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr0_tr0() {
		return (sensors.operationCallback.trafficLightIsGreen() && !sensors.operationCallback.isObstacleAhead());
	}
	
	private boolean check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr0_tr0() {
		return navigation.operationCallback.isOnTarget();
	}
	
	private boolean check_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr0_tr0() {
		return sensors.operationCallback.isObstacleAhead();
	}
	
	private void effect_simpleTrafficLightRobot_driving_tr0() {
		exitSequence_simpleTrafficLightRobot_driving();
		server.raiseArrived();
		
		enterSequence_simpleTrafficLightRobot_idle_default();
		react();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_tr0() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead();
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_1();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_tr0() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side();
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_0();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_tr0() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side();
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_1();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_0_tr0() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_1_tr0() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_0();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr0() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr1() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr0() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr1() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr0() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr1() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_5_tr0() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr0() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__exit_Default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr1() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_0_tr0() {
		react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1();
	}
	
	private void effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr0() {
		enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe_default();
	}
	
	private void effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr1() {
		actors.raiseDriveForward();
		
		enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed_default();
	}
	
	/* Entry action for state 'waiting in front of trafficlight'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight() {
		timerService.setTimer(this, 0, 100, false);
	}
	
	/* Entry action for state 'safe driving forward 2'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'safe driving forward 1'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'turning right'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right() {
		actors.raiseTurnRight();
	}
	
	/* Entry action for state 'safe driving forward'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'safe driving forward 1'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'turning left'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left() {
		actors.raiseTurnLeft();
	}
	
	/* Entry action for state 'safe driving forward 2'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'safe driving forward 3'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'entering crossroad'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad() {
		actors.raiseDriveForward();
	}
	
	/* Entry action for state 'driving forward'. */
	private void entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward() {
		raiseDriveForwardWhenSafe();
	}
	
	/* Entry action for state 'waiting until driving is safe'. */
	private void entryAction_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe() {
		timerService.setTimer(this, 1, 100, false);
	}
	
	/* Exit action for state 'waiting in front of trafficlight'. */
	private void exitAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'waiting until driving is safe'. */
	private void exitAction_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe() {
		timerService.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_simpleTrafficLightRobot_idle_default() {
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_IDLE;
	}
	
	/* 'default' enter sequence for state driving */
	private void enterSequence_simpleTrafficLightRobot_driving_default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_default();
		enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_default();
	}
	
	/* 'default' enter sequence for state waiting in front of trafficlight */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT;
	}
	
	/* 'default' enter sequence for state leaving crossroad ahead */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_default();
	}
	
	/* 'default' enter sequence for state safe driving forward 2 */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2;
	}
	
	/* 'default' enter sequence for state safe driving forward 1 */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1;
	}
	
	/* 'default' enter sequence for state leaving crossroad to right side */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_default();
	}
	
	/* 'default' enter sequence for state turning right */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT;
	}
	
	/* 'default' enter sequence for state safe driving forward */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD;
	}
	
	/* 'default' enter sequence for state leaving crossroad to left side */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default();
	}
	
	/* 'default' enter sequence for state safe driving forward 1 */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1;
	}
	
	/* 'default' enter sequence for state turning left */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT;
	}
	
	/* 'default' enter sequence for state safe driving forward 2 */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2;
	}
	
	/* 'default' enter sequence for state safe driving forward 3 */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3;
	}
	
	/* 'default' enter sequence for state entering crossroad */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD;
	}
	
	/* 'default' enter sequence for state driving forward */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_default() {
		entryAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward();
		nextStateIndex = 0;
		stateVector[0] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD;
	}
	
	/* 'default' enter sequence for state no safe driving needed */
	private void enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed_default() {
		nextStateIndex = 1;
		stateVector[1] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED;
	}
	
	/* 'default' enter sequence for state waiting until driving is safe */
	private void enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe_default() {
		entryAction_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe();
		nextStateIndex = 1;
		stateVector[1] = State.SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE;
	}
	
	/* 'default' enter sequence for region simpleTrafficLightRobot */
	private void enterSequence_simpleTrafficLightRobot_default() {
		react_simpleTrafficLightRobot__entry_Default();
	}
	
	/* 'default' enter sequence for region _primaryDrivingBehaviour */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_default() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__entry_Default();
	}
	
	/* 'default' enter sequence for region _leavingCrossroadAhead */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_default() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveRight */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_default() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default();
	}
	
	/* 'default' enter sequence for region _onCrossroadDriveLeft */
	private void enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_default() {
		react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default();
	}
	
	/* 'default' enter sequence for region _drivingBehaviourSafetyLoop */
	private void enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_default() {
		react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__entry_Default();
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_simpleTrafficLightRobot_idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state driving */
	private void exitSequence_simpleTrafficLightRobot_driving() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour();
		exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop();
	}
	
	/* Default exit sequence for state waiting in front of trafficlight */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight();
	}
	
	/* Default exit sequence for state leaving crossroad ahead */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead();
	}
	
	/* Default exit sequence for state safe driving forward 2 */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state safe driving forward 1 */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state leaving crossroad to right side */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight();
	}
	
	/* Default exit sequence for state turning right */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state safe driving forward */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state leaving crossroad to left side */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side() {
		exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft();
	}
	
	/* Default exit sequence for state safe driving forward 1 */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state turning left */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state safe driving forward 2 */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state safe driving forward 3 */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state entering crossroad */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state driving forward */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state no safe driving needed */
	private void exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state waiting until driving is safe */
	private void exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
		
		exitAction_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe();
	}
	
	/* Default exit sequence for region simpleTrafficLightRobot */
	private void exitSequence_simpleTrafficLightRobot() {
		switch (stateVector[0]) {
		case SIMPLETRAFFICLIGHTROBOT_IDLE:
			exitSequence_simpleTrafficLightRobot_idle();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED:
			exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE:
			exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _primaryDrivingBehaviour */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour() {
		switch (stateVector[0]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_WAITING_IN_FRONT_OF_TRAFFICLIGHT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_ENTERING_CROSSROAD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_DRIVING_FORWARD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _leavingCrossroadAhead */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead() {
		switch (stateVector[0]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_AHEAD__LEAVINGCROSSROADAHEAD_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveRight */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight() {
		switch (stateVector[0]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_TURNING_RIGHT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_RIGHT_SIDE__ONCROSSROADDRIVERIGHT_SAFE_DRIVING_FORWARD:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _onCrossroadDriveLeft */
	private void exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft() {
		switch (stateVector[0]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_1:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_TURNING_LEFT:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_2:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__PRIMARYDRIVINGBEHAVIOUR_LEAVING_CROSSROAD_TO_LEFT_SIDE__ONCROSSROADDRIVELEFT_SAFE_DRIVING_FORWARD_3:
			exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region _drivingBehaviourSafetyLoop */
	private void exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop() {
		switch (stateVector[1]) {
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_NO_SAFE_DRIVING_NEEDED:
			exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed();
			break;
		case SIMPLETRAFFICLIGHTROBOT_DRIVING__DRIVINGBEHAVIOURSAFETYLOOP_WAITING_UNTIL_DRIVING_IS_SAFE:
			exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_0() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_0_tr0();
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_1() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_1_tr0();
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2() {
		if (check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr0_tr0()) {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr0();
		} else {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3() {
		if (check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr0_tr0()) {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr0();
		} else {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_3_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4() {
		if (check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr0_tr0()) {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr0();
		} else {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_4_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_5() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_5_tr0();
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6() {
		if (check_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr0_tr0()) {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr0();
		} else {
			effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_0() {
		effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_0_tr0();
	}
	
	/* The reactions of state null. */
	private void react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1() {
		if (check_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr0_tr0()) {
			effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr0();
		} else {
			effect_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_1_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot__entry_Default() {
		enterSequence_simpleTrafficLightRobot_idle_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead__entry_Default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight__entry_Default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft__entry_Default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__entry_Default() {
		enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__entry_Default() {
		enterSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed_default();
	}
	
	/* The reactions of exit default. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default() {
		effect_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__exit_Default() {
		effect_simpleTrafficLightRobot_driving_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean simpleTrafficLightRobot_idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (newTarget) {
				exitSequence_simpleTrafficLightRobot_idle();
				enterSequence_simpleTrafficLightRobot_driving_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_waiting_in_front_of_trafficlight();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_5();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_1();
				enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead__leavingCrossroadAhead_safe_driving_forward_2_default();
				simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_ahead_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_turning_right();
				enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward_default();
				simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight_safe_driving_forward();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side__onCrossroadDriveRight__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_right_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_1();
				enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left_default();
				simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_turning_left();
				enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2_default();
				simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_2();
				enterSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3_default();
				simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft_safe_driving_forward_3();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side__onCrossroadDriveLeft__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving__primaryDrivingBehaviour_leaving_crossroad_to_left_side_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_entering_crossroad();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_2();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (actionCompleted) {
				exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward();
				react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_6();
			} else {
				if (actionCompletedAndTrafficLightAhead) {
					exitSequence_simpleTrafficLightRobot_driving__primaryDrivingBehaviour_driving_forward();
					react_simpleTrafficLightRobot_driving__primaryDrivingBehaviour__choice_5();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (driveForwardWhenSafe) {
				exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_no_safe_driving_needed();
				react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop_waiting_until_driving_is_safe();
				react_simpleTrafficLightRobot_driving__drivingBehaviourSafetyLoop__choice_0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = simpleTrafficLightRobot_driving_react(try_transition);
		}
		return did_transition;
	}
	
}
