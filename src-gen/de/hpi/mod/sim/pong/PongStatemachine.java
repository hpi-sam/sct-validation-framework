/** Generated by YAKINDU Statechart Tools code generator. */
package de.hpi.mod.sim.pong;


public class PongStatemachine implements IPongStatemachine {
	private boolean initialized = false;
	
	public enum State {
		pong_Off,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public PongStatemachine() {
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_pong_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case pong_Off:
				pong_Off_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_pong();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case pong_Off:
			return stateVector[0] == State.pong_Off;
		default:
			return false;
		}
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_pong_Off_default() {
		nextStateIndex = 0;
		stateVector[0] = State.pong_Off;
	}
	
	/* 'default' enter sequence for region pong */
	private void enterSequence_pong_default() {
		react_pong__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_pong_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region pong */
	private void exitSequence_pong() {
		switch (stateVector[0]) {
		case pong_Off:
			exitSequence_pong_Off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_pong__entry_Default() {
		enterSequence_pong_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean pong_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
